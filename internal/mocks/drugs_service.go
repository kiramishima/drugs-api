// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\interfaces\drugs_service.go
//
// Generated by this command:
//
//	mockgen -source .\internal\interfaces\drugs_service.go -destination .\internal\mocks\drugs_service.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "kiramishima/ionix/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDrugService is a mock of DrugService interface.
type MockDrugService struct {
	ctrl     *gomock.Controller
	recorder *MockDrugServiceMockRecorder
}

// MockDrugServiceMockRecorder is the mock recorder for MockDrugService.
type MockDrugServiceMockRecorder struct {
	mock *MockDrugService
}

// NewMockDrugService creates a new mock instance.
func NewMockDrugService(ctrl *gomock.Controller) *MockDrugService {
	mock := &MockDrugService{ctrl: ctrl}
	mock.recorder = &MockDrugServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDrugService) EXPECT() *MockDrugServiceMockRecorder {
	return m.recorder
}

// DeleteDrug mocks base method.
func (m *MockDrugService) DeleteDrug(ctx context.Context, drugId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDrug", ctx, drugId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDrug indicates an expected call of DeleteDrug.
func (mr *MockDrugServiceMockRecorder) DeleteDrug(ctx, drugId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDrug", reflect.TypeOf((*MockDrugService)(nil).DeleteDrug), ctx, drugId)
}

// GetListDrugs mocks base method.
func (m *MockDrugService) GetListDrugs(ctx context.Context) ([]*models.Drug, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListDrugs", ctx)
	ret0, _ := ret[0].([]*models.Drug)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListDrugs indicates an expected call of GetListDrugs.
func (mr *MockDrugServiceMockRecorder) GetListDrugs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListDrugs", reflect.TypeOf((*MockDrugService)(nil).GetListDrugs), ctx)
}

// NewDrug mocks base method.
func (m *MockDrugService) NewDrug(ctx context.Context, form *models.DrugForm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDrug", ctx, form)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewDrug indicates an expected call of NewDrug.
func (mr *MockDrugServiceMockRecorder) NewDrug(ctx, form any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDrug", reflect.TypeOf((*MockDrugService)(nil).NewDrug), ctx, form)
}

// UpdateDrug mocks base method.
func (m *MockDrugService) UpdateDrug(ctx context.Context, drugId int, form *models.DrugForm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDrug", ctx, drugId, form)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDrug indicates an expected call of UpdateDrug.
func (mr *MockDrugServiceMockRecorder) UpdateDrug(ctx, drugId, form any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDrug", reflect.TypeOf((*MockDrugService)(nil).UpdateDrug), ctx, drugId, form)
}
